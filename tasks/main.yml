---

- name: include OS-specific vars
  ansible.builtin.include_vars: >-
    {{ lookup("ansible.builtin.first_found", __ssh_vars_files) }}

- name: update package cache
  ansible.builtin.package:
    update_cache: yes
  become: yes
  when:
    - __ssh_virtualized

- name: 'install packages {{ __ssh_packages }}'
  ansible.builtin.package:
    name: '{{ __ssh_packages }}'
  become: yes

# -----------------------------------------------------------------------------
# authorized keys
# -----------------------------------------------------------------------------

- name: deploy authorized keys
  ansible.builtin.include_tasks: 'authorized-keys.yml'
  when: >-
    ssh_users | default([]) |
      selectattr('authorized_keys', 'defined') |
      list | length
  tags:
    - ssh-authorized-keys

# -----------------------------------------------------------------------------
# known hosts
# -----------------------------------------------------------------------------

- name: deploy known hosts
  ansible.builtin.template:
    src: ssh_known_hosts.j2
    dest: /etc/ssh/ssh_known_hosts
    owner: root
    group: root
    mode: 0644
  when: ssh_known_hosts is defined
  tags:
    - ssh-known-hosts

# -----------------------------------------------------------------------------
# moduli
# -----------------------------------------------------------------------------

- name: check /etc/ssh/moduli
  ansible.builtin.script: 'check-moduli.sh {{ ssh_modulus_min }}'
  when: ssh_modulus_min is defined
  register: __ssh_moduli_check
  check_mode: no
  changed_when: >-
    (__ssh_moduli_check.stdout | int) > 0
  tags:
    - ssh-sshd-config
    - ssh-moduli

- name: remove small moduli from /etc/ssh/moduli # noqa no-handler
  ansible.builtin.script: 'mod-moduli.sh {{ ssh_modulus_min }}'
  when: >-
    not ansible_check_mode and
    ssh_modulus_min is defined and
    __ssh_moduli_check.changed
  register: __ssh_moduli
  changed_when: >-
    __ssh_moduli.stdout.find('XXXchangedXXX') != -1
  tags:
    - ssh-sshd-config
    - ssh-moduli

# -----------------------------------------------------------------------------
# banner
# -----------------------------------------------------------------------------

- name: deploy ssh banner
  ansible.builtin.copy:
    src: '{{ ssh_banner.src }}'
    dest: '{{ ssh_banner.dest }}'
    owner: root
    group: root
    mode: 0644
  when: >
    ssh_banner is defined and
    ssh_banner.src is defined and
    ssh_banner.dest is defined
  tags:
    - ssh-banner
    - ssh-sshd-config

# -----------------------------------------------------------------------------
# generate host keys
# -----------------------------------------------------------------------------

# host keys are checked by `sshd -t` (used later in validation)

# This is needed on first pass, when the package wasn't installed yet and the
# service never ran. Some distros have no post install task for this, but a
# service dependency from the main service to a gen keys service, so we
# manually need to trigger this service to have the host keys.

- name: generate host keys
  ansible.builtin.service:
    name: '{{ __ssh_genkeys }}'
    state: started
  become: yes
  when: __ssh_genkeys is defined
  tags:
    - ssh-host-keys

# -----------------------------------------------------------------------------
# privilege separation
# -----------------------------------------------------------------------------

- name: create privilege separation directory
  ansible.builtin.file:
    path: /run/sshd
    state: directory
    owner: root
    group: root
    mode: 0755
  when: __ssh_distro == 'ubuntu'

# -----------------------------------------------------------------------------
# sshd_config
# -----------------------------------------------------------------------------

- name: deploy SSH daemon configuration
  ansible.builtin.template:
    src: '{{ lookup("first_found", __ssh_sshd_config_templates) }}'
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: 0644
    validate: /usr/sbin/sshd -t -f %s
  become: yes
  register: __sshd_configuration
  tags:
    - ssh-banner
    - ssh-sshd-config

- name: do we need conf.d
  ansible.builtin.set_fact:
    __ssh_sshd_config_d_enabled: '{{ __ssh_os_version == "redhat_9" }}'

- name: show conf.d enabled
  ansible.builtin.debug:
    var: __ssh_sshd_config_d_enabled
  when: ansible_check_mode | bool

- name: deploy SSH daemon configuration to conf.d
  ansible.builtin.template:
    src: '{{ lookup("first_found", __ssh_sshd_config_d_templates) }}'
    dest: /etc/ssh/sshd_config.d/10-ansible.conf
    owner: root
    group: root
    mode: 0600
    validate: /usr/sbin/sshd -t -f %s
  become: yes
  when: __ssh_sshd_config_d_enabled
  register: __sshd_configuration_conf_d
  tags:
    - ssh-banner
    - ssh-sshd-config

# -----------------------------------------------------------------------------
# service
# -----------------------------------------------------------------------------

- name: enable SSH service and assure it is started
  ansible.builtin.service:
    name: sshd
    enabled: yes
    state: >-
      {{
        (
          (
            __sshd_configuration.changed | default(False)
            or
            __sshd_configuration_conf_d.changed | default(False)
            or
            __ssh_moduli.changed
          )
            | default(False)
        )
          | ternary("reloaded", "started")
      }}
  become: yes
  tags:
    - service

...
